version: '3.8'

services:
  app:
    build: .
    container_name: questionnaire-system
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_PATH=/app/data/questionnaires.db
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - BACKUP_ENABLED=${BACKUP_ENABLED:-true}
      - BACKUP_INTERVAL_HOURS=${BACKUP_INTERVAL_HOURS:-24}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_sessions:/app/sessions
      - app_backups:/app/backups
    networks:
      - questionnaire_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # nginx服务已移除

  # 可选：Redis 用于会话存储（生产环境推荐）
  # redis:
  #   image: redis:7-alpine
  #   container_name: questionnaire-redis
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - questionnaire_network

  # 可选：PostgreSQL 数据库（大规模部署推荐）
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: questionnaire-postgres
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB:-questionnaire}
  #     - POSTGRES_USER=${POSTGRES_USER:-questionnaire}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - questionnaire_network

volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  app_sessions:
    driver: local
  app_backups:
    driver: local
  nginx_logs:
    driver: local
  # redis_data:
  #   driver: local
  # postgres_data:
  #   driver: local

networks:
  questionnaire_network:
    driver: bridge