name: 部署问卷数据管理系统

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: 运行测试
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: 代码质量检查
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 运行测试
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html
    
    - name: 上传测试覆盖率
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    name: 安全扫描
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 运行 Trivy 漏洞扫描
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 上传 Trivy 扫描结果
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    name: 构建镜像
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置 Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 登录容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 提取元数据
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 构建并推送镜像
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    name: 部署到测试环境
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: staging
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 部署到测试服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        port: ${{ secrets.STAGING_PORT || 22 }}
        script: |
          cd /opt/questionnaire-system
          
          # 备份当前版本
          docker-compose exec -T app sqlite3 /app/data/questionnaires.db ".backup /app/backups/pre-deploy-$(date +%Y%m%d_%H%M%S).db"
          
          # 拉取最新镜像
          docker-compose pull
          
          # 重启服务
          docker-compose up -d
          
          # 等待服务启动
          sleep 30
          
          # 健康检查
          curl -f http://localhost:8081/health || exit 1
          
          echo "测试环境部署完成"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    name: 部署到生产环境
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 部署到生产服务器
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          cd /opt/questionnaire-system
          
          # 创建部署前备份
          echo "创建部署前备份..."
          docker-compose exec -T app sqlite3 /app/data/questionnaires.db ".backup /app/backups/pre-deploy-$(date +%Y%m%d_%H%M%S).db"
          
          # 拉取最新镜像
          echo "拉取最新镜像..."
          docker-compose pull
          
          # 滚动更新（零停机部署）
          echo "开始滚动更新..."
          docker-compose up -d --no-deps app
          
          # 等待新容器启动
          echo "等待服务启动..."
          sleep 60
          
          # 健康检查
          echo "执行健康检查..."
          for i in {1..10}; do
            if curl -f http://localhost:8081/health; then
              echo "健康检查通过"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "健康检查失败，回滚部署"
              docker-compose rollback
              exit 1
            fi
            echo "等待服务就绪... ($i/10)"
            sleep 30
          done
          
          # 清理旧镜像
          docker image prune -f
          
          echo "生产环境部署完成"
    
    - name: 发送部署通知
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          生产环境部署 ${{ job.status }}
          分支: ${{ github.ref }}
          提交: ${{ github.sha }}
          作者: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    name: 清理资源
    if: always()
    
    steps:
    - name: 清理旧的容器镜像
      uses: actions/delete-package-versions@v4
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: 'container'
        min-versions-to-keep: 10
        delete-only-untagged-versions: true